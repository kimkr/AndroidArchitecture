apply plugin: 'java'
apply plugin: 'me.tatarka.retrolambda'

String getJavaVersionOSX(Integer v) {
    def sout = new StringBuffer()
    def proc = "/usr/libexec/java_home -v 1.$v".execute()
    proc.consumeProcessOutput(sout, new StringBuffer())
    proc.waitForOrKill(1000)
    return sout.toString().replace("\n", "").replace("\r", "")
}

String java8 = "/usr/lib/jvm/java-8-oracle"
String java7 = "/usr/lib/jvm/java-7-oracle"


String OS = System.getProperty("os.name").toLowerCase();
if (OS.indexOf("win") >= 0) {
    System.out.println("This is Windows");
    // TODO : Windows JAVA setting

} else if (OS.indexOf("mac") >= 0) {
    System.out.println("This is Mac");
    java8 = getJavaVersionOSX(8)
    java7 = getJavaVersionOSX(7)

} else if (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0) {
    System.out.println("This is Unix or Linux");

} else if (OS.indexOf("sunos") >= 0) {
    System.out.println("This is Solaris");

} else {
    System.out.println("Unknown OS");
}

retrolambda {
    jdk java8
    oldJdk java7
    javaVersion JavaVersion.VERSION_1_7
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    def domainDependencies = rootProject.ext.domainDependencies
    def domainTestDependencies = rootProject.ext.domainTestDependencies

    provided domainDependencies.javaxAnnotation
    compile dataDependencies.greenDao
    compile dataDependencies.lombok
    compile domainDependencies.arrow
    compile domainDependencies.javaxInject
    compile domainDependencies.rxJava
    testCompile domainTestDependencies.assertj
    testCompile domainTestDependencies.junit
    testCompile domainTestDependencies.mockito
}
